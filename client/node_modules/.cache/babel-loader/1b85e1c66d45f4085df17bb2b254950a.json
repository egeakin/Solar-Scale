{"ast":null,"code":"import React, { createContext, useContext, useRef, useState, useCallback, useLayoutEffect, useEffect, useImperativeHandle, forwardRef, useMemo } from 'react';\nimport { Polyline as Polyline$1, DistanceDisplayCondition, ScreenSpaceEventType, ScreenSpaceEventHandler as ScreenSpaceEventHandler$1, Entity as Entity$1, Event, BillboardCollection as BillboardCollection$1, BillboardGraphics as BillboardGraphics$1, BoxGraphics as BoxGraphics$1, Cesium3DTileset as Cesium3DTileset$1, CesiumWidget as CesiumWidget$1, CorridorGraphics as CorridorGraphics$1, CustomDataSource as CustomDataSource$1, CylinderGraphics as CylinderGraphics$1, CzmlDataSource as CzmlDataSource$1, EllipseGraphics as EllipseGraphics$1, EllipsoidGraphics as EllipsoidGraphics$1, ConstantProperty, Fog as Fog$1, GeoJsonDataSource as GeoJsonDataSource$1, GroundPrimitive as GroundPrimitive$1, ImageryLayer as ImageryLayer$1, KmlDataSource as KmlDataSource$1, LabelCollection as LabelCollection$1, LabelGraphics as LabelGraphics$1, Model as Model$1, ModelGraphics as ModelGraphics$1, Moon as Moon$1, ParticleSystem as ParticleSystem$1, PathGraphics as PathGraphics$1, PlaneGraphics as PlaneGraphics$1, PointGraphics as PointGraphics$1, PointPrimitiveCollection as PointPrimitiveCollection$1, PolygonGraphics as PolygonGraphics$1, PolylineCollection as PolylineCollection$1, PolylineGraphics as PolylineGraphics$1, PolylineVolumeGraphics as PolylineVolumeGraphics$1, PostProcessStage as PostProcessStage$1, PostProcessStageLibrary, PostProcessStageComposite as PostProcessStageComposite$1, Primitive as Primitive$1, RectangleGraphics as RectangleGraphics$1, SceneMode, Sun as Sun$1, TimeDynamicPointCloud as TimeDynamicPointCloud$1, Viewer as Viewer$1, WallGraphics as WallGraphics$1 } from 'cesium';\nimport { createPortal } from 'react-dom';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n}\n\nvar CesiumContext = createContext({});\nvar Provider = CesiumContext.Provider,\n    Consumer = CesiumContext.Consumer;\n\nvar useCesium = function useCesium() {\n  return useContext(CesiumContext);\n};\n\nvar polylineEquals = function polylineEquals(a, b) {\n  return !!a && !!b && a instanceof Polyline$1 && b instanceof Polyline$1 && a.show === b.show && a.width === b.width && a.loop === b.loop && a.material === b.material && a.positions === b.positions && a.id === b.id && DistanceDisplayCondition.equals(a.distanceDisplayCondition, b.distanceDisplayCondition);\n};\n\nvar pickedObjectEquals = function pickedObjectEquals(picked, element) {\n  return !!picked && (picked === element || !!picked.id && picked.id === element || !!picked.primitive && (picked.primitive === element || !!picked.primitive.equals && picked.primitive.equals(element) || polylineEquals(picked.primitive, element)));\n};\n\nfunction pick(obj, keys) {\n  if (!keys) return {};\n  return entries(obj).reduce(function (a, _a) {\n    var k = _a[0],\n        v = _a[1];\n    if (!includes(keys, k)) return a;\n    a[k] = v;\n    return a;\n  }, {});\n}\n\nfunction entries(obj) {\n  return Object.keys(obj).map(function (k) {\n    return [k, obj[k]];\n  });\n}\n\nfunction includes(array, value) {\n  return !!array && array.indexOf(value) !== -1;\n}\n\nfunction shallowEquals(a1, a2) {\n  return !!a1 && !!a2 && __spreadArrays(Object.keys(a1), Object.keys(a2)).every(function (k) {\n    return a1[k] === a2[k];\n  });\n}\n\nvar eventManagerContextKey = \"__RESIUM_EVENT_MANAGER\";\nvar eventNames = [\"onClick\", \"onDoubleClick\", \"onMouseDown\", \"onMouseUp\", \"onMiddleClick\", \"onMiddleDown\", \"onMiddleUp\", \"onMouseMove\", \"onPinchEnd\", \"onPinchMove\", \"onPinchStart\", \"onRightClick\", \"onRightDown\", \"onRightUp\", \"onWheel\", \"onMouseEnter\", \"onMouseLeave\"];\n\nvar EventManager =\n/** @class */\nfunction () {\n  function EventManager(scene) {\n    var _this = this;\n\n    var _a;\n\n    this.events = {\n      onClick: new Map(),\n      onDoubleClick: new Map(),\n      onMouseDown: new Map(),\n      onMouseUp: new Map(),\n      onMiddleClick: new Map(),\n      onMiddleDown: new Map(),\n      onMiddleUp: new Map(),\n      onMouseMove: new Map(),\n      onPinchEnd: new Map(),\n      onPinchMove: new Map(),\n      onPinchStart: new Map(),\n      onRightClick: new Map(),\n      onRightDown: new Map(),\n      onRightUp: new Map(),\n      onWheel: new Map(),\n      onMouseEnter: new Map(),\n      onMouseLeave: new Map()\n    };\n    this.hovered = undefined;\n\n    this.onMouseMove = function (e) {\n      var picked = _this.pick(e.endPosition);\n\n      if (_this.hovered !== picked) {\n        if (_this.hovered) {\n          var onMouseLeave = _this.events.onMouseLeave.get(_this.hovered);\n\n          if (onMouseLeave) {\n            onMouseLeave(e, _this.hovered);\n          }\n\n          var onRootMouseLeave = _this.events.onMouseLeave.get(null);\n\n          if (onRootMouseLeave) {\n            onRootMouseLeave(e, _this.hovered);\n          }\n        }\n\n        if (picked) {\n          var onMouseEnter = _this.events.onMouseEnter.get(picked);\n\n          if (onMouseEnter) {\n            onMouseEnter(e, picked);\n          }\n\n          var onRootMouseEnter = _this.events.onMouseEnter.get(null);\n\n          if (onRootMouseEnter) {\n            onRootMouseEnter(e, picked);\n          }\n        }\n      }\n\n      if (picked) {\n        var onMouseMove = _this.events.onMouseMove.get(picked);\n\n        if (onMouseMove) {\n          onMouseMove(e, picked);\n        }\n      }\n\n      var onRootMouseMove = _this.events.onMouseMove.get(null);\n\n      if (onRootMouseMove) {\n        onRootMouseMove(e, picked);\n      }\n\n      _this.hovered = picked;\n    };\n\n    this.eventCallback = function (et) {\n      var em = _this.events[et];\n      return function (e) {\n        var _a;\n\n        var picked = _this.pick((_a = e) === null || _a === void 0 ? void 0 : _a.position);\n\n        if (picked) {\n          em.forEach(function (cb, element) {\n            if (pickedObjectEquals(picked, element)) {\n              cb(e, picked);\n            }\n          });\n        }\n\n        var rootEvent = em.get(null);\n\n        if (rootEvent) {\n          rootEvent(e, picked);\n        }\n      };\n    };\n\n    this.scene = scene;\n    this.sshe = new ScreenSpaceEventHandler$1((_a = scene) === null || _a === void 0 ? void 0 : _a.canvas);\n  }\n\n  EventManager.prototype.destroy = function () {\n    this.hovered = undefined;\n\n    if (!this.sshe.isDestroyed()) {\n      this.sshe.destroy();\n    }\n  };\n\n  EventManager.prototype.isDestroyed = function () {\n    return this.sshe.isDestroyed();\n  };\n\n  EventManager.prototype.on = function (element, type, cb) {\n    if (element && type === \"onWheel\") return;\n    this.events[type].set(element, cb);\n  };\n\n  EventManager.prototype.off = function (element, type) {\n    this.events[type].delete(element);\n\n    if (this.hovered === element) {\n      this.hovered = undefined;\n    }\n  };\n\n  EventManager.prototype.setEvents = function (element, props) {\n    var _this = this;\n\n    entries(props).forEach(function (_a) {\n      var k = _a[0],\n          v = _a[1];\n      var et = k;\n\n      if (includes(eventNames, et)) {\n        if (v) {\n          _this.on(element, et, v);\n        } else {\n          _this.off(element, et);\n        }\n      }\n    });\n    this.commit();\n  };\n\n  EventManager.prototype.clearEvents = function (element) {\n    var _this = this;\n\n    this.hovered = undefined;\n    eventNames.forEach(function (et) {\n      _this.off(element, et);\n    });\n    this.commit();\n  };\n\n  EventManager.prototype.commit = function () {\n    var _this = this;\n\n    var sshe = this.sshe;\n    var destroyed = this.sshe.isDestroyed();\n\n    if (!destroyed) {\n      if (this.events.onMouseEnter.size === 0 && this.events.onMouseLeave.size === 0 && this.events.onMouseMove.size === 0) {\n        this.sshe.removeInputAction(ScreenSpaceEventType.MOUSE_MOVE);\n      } else if (!this.sshe.getInputAction(ScreenSpaceEventType.MOUSE_MOVE)) {\n        this.sshe.setInputAction(this.onMouseMove, ScreenSpaceEventType.MOUSE_MOVE);\n      }\n    }\n\n    entries(this.events).forEach(function (_a) {\n      var et = _a[0],\n          m = _a[1];\n\n      if (et === \"onMouseEnter\" || et === \"onMouseLeave\" || et === \"onMouseMove\") {\n        return;\n      }\n\n      var cesiumEventType = EventManager.eventTypeMap[et];\n\n      if (!destroyed) {\n        if (m.size === 0) {\n          sshe.removeInputAction(cesiumEventType);\n        } else if (!sshe.getInputAction(cesiumEventType)) {\n          sshe.setInputAction(_this.eventCallback(et), cesiumEventType);\n        }\n      }\n    });\n  };\n\n  EventManager.prototype.getScreenSpaceEventHandler = function () {\n    return this.sshe;\n  };\n\n  EventManager.prototype.pick = function (pos) {\n    if (!pos) {\n      return undefined;\n    }\n\n    var picked = this.scene.pick(pos);\n\n    if (picked) {\n      if (picked.id instanceof Entity$1) {\n        return picked.id;\n      }\n\n      return picked;\n    }\n\n    return undefined;\n  };\n\n  EventManager.eventTypeMap = {\n    onClick: ScreenSpaceEventType.LEFT_CLICK,\n    onDoubleClick: ScreenSpaceEventType.LEFT_DOUBLE_CLICK,\n    onMouseDown: ScreenSpaceEventType.LEFT_DOWN,\n    onMouseUp: ScreenSpaceEventType.LEFT_UP,\n    onMiddleClick: ScreenSpaceEventType.MIDDLE_CLICK,\n    onMiddleDown: ScreenSpaceEventType.MIDDLE_DOWN,\n    onMiddleUp: ScreenSpaceEventType.MIDDLE_UP,\n    onMouseMove: ScreenSpaceEventType.MOUSE_MOVE,\n    onPinchEnd: ScreenSpaceEventType.PINCH_END,\n    onPinchMove: ScreenSpaceEventType.PINCH_MOVE,\n    onPinchStart: ScreenSpaceEventType.PINCH_START,\n    onRightClick: ScreenSpaceEventType.RIGHT_CLICK,\n    onRightDown: ScreenSpaceEventType.RIGHT_DOWN,\n    onRightUp: ScreenSpaceEventType.RIGHT_UP,\n    onWheel: ScreenSpaceEventType.WHEEL,\n    onMouseEnter: ScreenSpaceEventType.MOUSE_MOVE,\n    onMouseLeave: ScreenSpaceEventType.MOUSE_MOVE\n  };\n  return EventManager;\n}();\n\nvar useCesiumComponent = function useCesiumComponent(_a, props, ref) {\n  var name = _a.name,\n      create = _a.create,\n      destroy = _a.destroy,\n      provide = _a.provide,\n      update = _a.update,\n      cesiumProps = _a.cesiumProps,\n      cesiumReadonlyProps = _a.cesiumReadonlyProps,\n      cesiumEventProps = _a.cesiumEventProps,\n      setCesiumPropsAfterCreate = _a.setCesiumPropsAfterCreate,\n      useCommonEvent = _a.useCommonEvent,\n      useRootEvent = _a.useRootEvent;\n  var element = useRef();\n  var ctx = useCesium();\n  var provided = useRef(provide ? {} : undefined);\n  var attachedEvents = useRef({});\n  var initialProps = useRef(props);\n  var prevProps = useRef({});\n\n  var _b = useState(false),\n      mounted = _b[0],\n      setMounted = _b[1];\n\n  var mountedRef = useRef(false);\n  var wrapperRef = useRef(null);\n  var stateRef = useRef();\n  var eventManager = ctx[eventManagerContextKey];\n  var updateProperties = useCallback(function (props) {\n    var _a;\n\n    if (!element.current) return;\n    var target = element.current;\n    var eventKeys = Object.keys(cesiumEventProps || []);\n\n    var propDiff = __spreadArrays(Object.keys(props), Object.keys(prevProps.current)).filter(function (k) {\n      return prevProps.current[k] !== props[k];\n    }).map(function (k) {\n      return [k, prevProps.current[k], props[k]];\n    });\n\n    var updatedReadonlyProps = [];\n\n    for (var _i = 0, propDiff_1 = propDiff; _i < propDiff_1.length; _i++) {\n      var _b = propDiff_1[_i],\n          k = _b[0],\n          prevValue = _b[1],\n          newValue = _b[2];\n\n      if (includes(cesiumProps, k)) {\n        target[k] = newValue;\n      } else if (includes(cesiumReadonlyProps, k)) {\n        updatedReadonlyProps.push(k);\n      } else if (includes(eventKeys, k)) {\n        var cesiumKey = (_a = cesiumEventProps) === null || _a === void 0 ? void 0 : _a[k];\n        var eventHandler = target[cesiumKey];\n\n        if (eventHandler instanceof Event) {\n          if (typeof prevValue === \"undefined\") {\n            eventHandler.addEventListener(newValue);\n            attachedEvents.current[cesiumKey] = newValue;\n          } else if (typeof newValue === \"undefined\") {\n            eventHandler.removeEventListener(prevValue);\n            delete attachedEvents.current[cesiumKey];\n          } else {\n            eventHandler.removeEventListener(prevValue);\n            eventHandler.addEventListener(newValue);\n          }\n        }\n      }\n    }\n\n    var em = useRootEvent ? provided.current && provided.current[eventManagerContextKey] : eventManager;\n\n    if (useCommonEvent && em && element.current) {\n      em.setEvents(useRootEvent ? null : element.current, props);\n    }\n\n    if (update && mountedRef.current) {\n      update(element.current, props, prevProps.current, ctx);\n    }\n\n    prevProps.current = props;\n    initialProps.current = props;\n\n    if (mountedRef.current && updatedReadonlyProps.length > 0) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.warn(\"Warning: <\" + name + \"> is recreated because following read-only props have been updated: \" + updatedReadonlyProps.join(\", \"));\n      }\n\n      unmount();\n      mount();\n    }\n  }, []);\n  var mount = useCallback(function () {\n    var _a;\n\n    var result = (_a = create) === null || _a === void 0 ? void 0 : _a(ctx, initialProps.current, wrapperRef.current);\n\n    if (Array.isArray(result)) {\n      element.current = result[0];\n      stateRef.current = result[1];\n    } else {\n      element.current = result;\n    }\n\n    if (setCesiumPropsAfterCreate) {\n      updateProperties(initialProps.current);\n    } else {\n      if (element.current && cesiumEventProps) {\n        var target = element.current;\n\n        for (var _i = 0, _b = Object.keys(initialProps.current); _i < _b.length; _i++) {\n          var key = _b[_i];\n          var eventKey = cesiumEventProps[key];\n\n          if (eventKey) {\n            var e = initialProps.current[key];\n            var eventHandler = target[eventKey];\n\n            if (e && eventHandler instanceof Event) {\n              eventHandler.addEventListener(e);\n            }\n          }\n        }\n      }\n\n      prevProps.current = initialProps.current;\n    }\n\n    if (provide && element.current) {\n      provided.current = _assign(_assign({}, ctx), provide(element.current, ctx, stateRef.current));\n    }\n\n    var em = useRootEvent ? provided.current && provided.current[eventManagerContextKey] : eventManager;\n\n    if (useCommonEvent && em && element.current) {\n      em.setEvents(useRootEvent ? null : element.current, initialProps.current);\n    }\n  }, []);\n  var unmount = useCallback(function () {\n    var _a, _b, _c;\n\n    if (element.current && destroy) {\n      destroy(element.current, ctx, wrapperRef.current, stateRef.current);\n    }\n\n    var em = useRootEvent ? provided.current && provided.current[eventManagerContextKey] : eventManager;\n\n    if (useCommonEvent && em && element.current) {\n      em.clearEvents(useRootEvent ? null : element.current);\n    }\n\n    if (element.current && !isDestroyed(element.current)) {\n      var attachedEventKeys = Object.keys(attachedEvents.current);\n\n      for (var _i = 0, attachedEventKeys_1 = attachedEventKeys; _i < attachedEventKeys_1.length; _i++) {\n        var k = attachedEventKeys_1[_i];\n        var eventHandler = element.current[k];\n        (_c = (_a = eventHandler) === null || _a === void 0 ? void 0 : (_b = _a).removeEventListener) === null || _c === void 0 ? void 0 : _c.call(_b, attachedEvents.current[k]);\n      }\n    }\n\n    attachedEvents.current = {};\n    provided.current = undefined;\n    stateRef.current = undefined;\n    element.current = undefined;\n    setMounted(false);\n    mountedRef.current = false;\n  }, []);\n  useLayoutEffect(function () {\n    mount();\n    return function () {\n      return unmount();\n    };\n  }, []);\n  useEffect(function () {\n    if (mounted) {\n      if (!shallowEquals(props, prevProps.current)) {\n        updateProperties(props);\n      }\n    } else {\n      prevProps.current = props;\n      initialProps.current = props;\n      setMounted(true);\n      mountedRef.current = true;\n    }\n  }, [mounted, props, updateProperties]);\n  useImperativeHandle(ref, function () {\n    return {\n      cesiumElement: element.current\n    };\n  });\n  return [provided.current, mounted, wrapperRef];\n};\n\nfunction isDestroyable(d) {\n  return d && typeof d.isDestroyed === \"function\" && typeof d.destroy === \"function\";\n}\n\nfunction isDestroyed(d) {\n  return isDestroyable(d) && d.isDestroyed();\n}\n\nvar createCesiumComponent = function createCesiumComponent(_a) {\n  var renderContainer = _a.renderContainer,\n      noChildren = _a.noChildren,\n      containerProps = _a.containerProps,\n      defaultProps = _a.defaultProps,\n      options = __rest(_a, [\"renderContainer\", \"noChildren\", \"containerProps\", \"defaultProps\"]);\n\n  var component = function component(props, ref) {\n    var mergedProps = _assign(_assign({}, defaultProps), props);\n\n    var _a = useCesiumComponent(options, mergedProps, ref),\n        provided = _a[0],\n        mounted = _a[1],\n        wrapperRef = _a[2];\n\n    if (noChildren) return null;\n    var children = mounted ? mergedProps.children : null;\n    var wrappedChildren = renderContainer ? React.createElement(\"div\", _assign({\n      ref: wrapperRef\n    }, typeof containerProps === \"function\" ? containerProps(mergedProps) : pick(mergedProps, containerProps)), children) : children;\n\n    if (provided) {\n      return React.createElement(CesiumContext.Provider, {\n        value: provided\n      }, wrappedChildren);\n    }\n\n    return wrappedChildren;\n  };\n\n  component.displayName = options.name;\n  return forwardRef(component);\n};\n\nvar createCameraOperation = function createCameraOperation(name, cameraOperationStart) {\n  var component = function component(props) {\n    var ctx = useCesium();\n    var prevProps = useRef();\n    var first = useRef(false);\n    useEffect(function () {\n      return function () {\n        if (ctx.camera && props.cancelFlightOnUnmount) {\n          ctx.camera.cancelFlight();\n        }\n      };\n    }, [ctx.camera, props.cancelFlightOnUnmount]);\n    useEffect(function () {\n      if (ctx.camera && ctx.scene && !ctx.scene.isDestroyed() && (!props.once || !first.current)) {\n        ctx.camera.cancelFlight();\n        cameraOperationStart(ctx.camera, props, prevProps.current);\n        first.current = true;\n      }\n\n      prevProps.current = props;\n    });\n    return null;\n  };\n\n  component.displayName = name;\n  return component;\n};\n\nvar withCesium = function withCesium(Component) {\n  return forwardRef(function (props, ref) {\n    return React.createElement(Consumer, null, function (value) {\n      return React.createElement(Component, _assign({}, props, {\n        ref: ref,\n        cesium: value\n      }));\n    });\n  });\n};\n\nvar cesiumProps = [\"alignAxis\", \"color\", \"disableDepthTestDistance\", \"distanceDisplayCondition\", \"height\", \"heightReference\", \"horizontalOrigin\", \"id\", \"image\", \"pixelOffset\", \"pixelOffsetScaleByDistance\", \"position\", \"rotation\", \"scale\", \"scaleByDistance\", \"show\", \"sizeInMeters\", \"translucencyByDistance\", \"verticalOrigin\", \"width\"];\nvar Billboard = createCesiumComponent({\n  name: \"Billboard\",\n  create: function create(context, props) {\n    var _a;\n\n    return (_a = context.billboardCollection) === null || _a === void 0 ? void 0 : _a.add(props);\n  },\n  destroy: function destroy(element, context) {\n    if (context.billboardCollection && !context.billboardCollection.isDestroyed()) {\n      context.billboardCollection.remove(element);\n    }\n  },\n  cesiumProps: cesiumProps,\n  useCommonEvent: true\n});\nvar cesiumProps$1 = [\"blendOption\", \"debugShowBoundingVolume\", \"length\", \"modelMatrix\"];\nvar BillboardCollection = createCesiumComponent({\n  name: \"BillboardCollection\",\n  create: function create(context, props) {\n    if (!context.primitiveCollection) return;\n    var element = new BillboardCollection$1({\n      modelMatrix: props.modelMatrix,\n      debugShowBoundingVolume: props.debugShowBoundingVolume,\n      scene: context.scene,\n      blendOption: props.blendOption\n    });\n    context.primitiveCollection.add(element);\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.primitiveCollection && !context.primitiveCollection.isDestroyed()) {\n      context.primitiveCollection.remove(element);\n    }\n\n    if (!element.isDestroyed()) {\n      element.destroy();\n    }\n  },\n  provide: function provide(element) {\n    return {\n      billboardCollection: element\n    };\n  },\n  cesiumProps: cesiumProps$1\n});\nvar cesiumProps$2 = [\"image\", \"show\", \"scale\", \"horizontalOrigin\", \"verticalOrigin\", \"eyeOffset\", \"pixelOffset\", \"rotation\", \"alignedAxis\", \"width\", \"height\", \"color\", \"scaleByDistance\", \"translucencyByDistance\", \"pixelOffsetScaleByDistance\", \"imageSubRegion\", \"sizeInMeters\", \"heightReference\", \"distanceDisplayCondition\", \"disableDepthTestDistance\"];\nvar cesiumEventProps = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar BillboardGraphics = createCesiumComponent({\n  name: \"BillboardGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new BillboardGraphics$1({\n      image: props.image,\n      show: props.show,\n      scale: props.scale,\n      horizontalOrigin: props.horizontalOrigin,\n      verticalOrigin: props.verticalOrigin,\n      eyeOffset: props.eyeOffset,\n      pixelOffset: props.pixelOffset,\n      rotation: props.rotation,\n      alignedAxis: props.alignedAxis,\n      width: props.width,\n      height: props.height,\n      color: props.color,\n      scaleByDistance: props.scaleByDistance,\n      translucencyByDistance: props.translucencyByDistance,\n      pixelOffsetScaleByDistance: props.pixelOffsetScaleByDistance,\n      imageSubRegion: props.imageSubRegion,\n      sizeInMeters: props.sizeInMeters,\n      heightReference: props.heightReference,\n      distanceDisplayCondition: props.distanceDisplayCondition,\n      disableDepthTestDistance: props.disableDepthTestDistance\n    });\n    context.entity.billboard = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.billboard = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$2,\n  cesiumEventProps: cesiumEventProps\n});\nvar cesiumProps$3 = [\"heightReference\", \"dimensions\", \"show\", \"fill\", \"material\", \"outline\", \"outlineColor\", \"outlineWidth\", \"shadows\", \"distanceDisplayCondition\"];\nvar cesiumEventProps$1 = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar BoxGraphics = createCesiumComponent({\n  name: \"BoxGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new BoxGraphics$1({\n      heightReference: props.heightReference,\n      dimensions: props.dimensions,\n      show: props.show,\n      fill: props.fill,\n      material: props.material,\n      outline: props.outline,\n      outlineColor: props.outlineColor,\n      outlineWidth: props.outlineWidth,\n      shadows: props.shadows,\n      distanceDisplayCondition: props.distanceDisplayCondition\n    });\n    context.entity.box = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.box = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$3,\n  cesiumEventProps: cesiumEventProps$1\n});\nvar cesiumProps$4 = [\"position\", \"direction\", \"up\", \"right\", \"frustum\", \"defaultMoveAmount\", \"defaultLookAmount\", \"defaultRotateAmount\", \"defaultZoomAmount\", \"constrainedAxis\", \"maximumTranslateFactor\", \"maximumZoomFactor\", \"percentageChanged\"];\nvar cesiumEventProps$2 = {\n  onChange: \"changed\",\n  onMoveEnd: \"moveEnd\",\n  onMoveStart: \"moveStart\"\n};\nvar Camera = createCesiumComponent({\n  name: \"Camera\",\n  create: function create(context) {\n    var _a;\n\n    return (_a = context.scene) === null || _a === void 0 ? void 0 : _a.camera;\n  },\n  cesiumProps: cesiumProps$4,\n  cesiumEventProps: cesiumEventProps$2,\n  setCesiumPropsAfterCreate: true\n});\nvar CameraFlyHome = createCameraOperation(\"CameraFlyHome\", function (camera, _a) {\n  var cancelFlightOnUnmount = _a.cancelFlightOnUnmount,\n      duration = _a.duration;\n  camera.flyHome(duration);\n});\nvar CameraFlyTo = createCameraOperation(\"CameraFlyTo\", function (camera, _a) {\n  var cancelFlightOnUnmount = _a.cancelFlightOnUnmount,\n      props = __rest(_a, [\"cancelFlightOnUnmount\"]);\n\n  camera.flyTo(props);\n});\nvar CameraFlyToBoundingSphere = createCameraOperation(\"CameraFlyToBoundingSphere\", function (camera, _a) {\n  var cancelFlightOnUnmount = _a.cancelFlightOnUnmount,\n      boundingSphere = _a.boundingSphere,\n      props = __rest(_a, [\"cancelFlightOnUnmount\", \"boundingSphere\"]);\n\n  camera.flyToBoundingSphere(boundingSphere, props);\n});\nvar cesiumProps$5 = [\"show\", \"modelMatrix\", \"shadows\", \"maximumScreenSpaceError\", \"maximumMemoryUsage\", \"cullRequestsWhileMoving\", \"cullRequestsWhileMovingMultiplier\", \"preloadWhenHidden\", \"preloadFlightDestinations\", \"preferLeaves\", \"progressiveResolutionHeightFraction\", \"foveatedScreenSpaceError\", \"foveatedConeSize\", \"foveatedMinimumScreenSpaceErrorRelaxation\", \"foveatedInterpolationCallback\", \"foveatedTimeDelay\", \"cullWithChildrenBounds\", \"dynamicScreenSpaceError\", \"dynamicScreenSpaceErrorDensity\", \"dynamicScreenSpaceErrorFactor\", \"dynamicScreenSpaceErrorHeightFalloff\", \"skipLevelOfDetail\", \"baseScreenSpaceError\", \"skipScreenSpaceErrorFactor\", \"skipLevels\", \"immediatelyLoadDesiredLevelOfDetail\", \"loadSiblings\", \"clippingPlanes\", \"classificationType\", \"ellipsoid\", \"imageBasedLightingFactor\", \"lightColor\", \"debugFreezeFrame\", \"debugColorizeTiles\", \"debugWireframe\", \"debugShowBoundingVolume\", \"debugShowContentBoundingVolume\", \"debugShowViewerRequestVolume\", \"debugShowGeometricError\", \"debugShowRenderingStatistics\", \"debugShowMemoryUsage\", \"debugShowUrl\", \"colorBlendAmount\", \"colorBlendMode\", \"luminanceAtZenith\", \"sphericalHarmonicCoefficients\", \"specularEnvironmentMaps\"];\nvar cesiumReadonlyProps = [\"url\", \"pointCloudShading\"];\nvar cesiumEventProps$3 = {\n  onAllTilesLoad: \"allTilesLoaded\",\n  onInitialTilesLoad: \"initialTilesLoaded\",\n  onLoadProgress: \"loadProgress\",\n  onTileFailed: \"tileFailed\",\n  onTileLoad: \"tileLoad\",\n  onTileUnload: \"tileUnload\",\n  onTileVisible: \"tileVisible\"\n};\nvar Cesium3DTileset = createCesiumComponent({\n  name: \"Cesium3DTileset\",\n  create: function create(context, props) {\n    if (!context.primitiveCollection) return;\n    var element = new Cesium3DTileset$1(props);\n\n    if (props.colorBlendAmount) {\n      element.colorBlendAmount = props.colorBlendAmount;\n    }\n\n    if (props.colorBlendMode) {\n      element.colorBlendMode = props.colorBlendMode;\n    }\n\n    if (props.onReady) {\n      element.readyPromise.then(props.onReady);\n    }\n\n    context.primitiveCollection.add(element);\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.primitiveCollection && !context.primitiveCollection.isDestroyed()) {\n      context.primitiveCollection.remove(element);\n    }\n\n    if (!element.isDestroyed()) {\n      element.destroy();\n    }\n  },\n  cesiumProps: cesiumProps$5,\n  cesiumReadonlyProps: cesiumReadonlyProps,\n  cesiumEventProps: cesiumEventProps$3,\n  useCommonEvent: true\n});\nvar cesiumProps$6 = [\"resolutionScale\", \"useDefaultRenderLoop\", \"targetFrameRate\", \"useBrowserRecommendedResolution\"];\nvar cesiumReadonlyProps$1 = [\"clock\", \"imageryProvider\", \"terrainProvider\", \"skyBox\", \"skyAtmosphere\", \"sceneMode\", \"scene3DOnly\", \"orderIndependentTranslucency\", \"mapMode2D\", \"mapProjection\", \"globe\", \"showRenderLoopErrors\", \"contextOptions\", \"creditContainer\", \"creditViewport\", \"terrainExaggeration\", \"shadows\", \"terrainShadows\", \"requestRenderMode\", \"maximumRenderTimeChange\"];\nvar CesiumWidget = createCesiumComponent({\n  name: \"CesiumWidget\",\n  create: function create(context, props, container) {\n    if (!container) return;\n    var v = new CesiumWidget$1(container, pick(props, __spreadArrays(cesiumProps$6, cesiumReadonlyProps$1)));\n    if (!v) return;\n\n    if (typeof props.resolutionScale === \"number\") {\n      v.resolutionScale = props.resolutionScale;\n    }\n\n    var eventManager = new EventManager(v.scene);\n    return [v, eventManager];\n  },\n  destroy: function destroy(element, context, ref, state) {\n    if (state && !state.isDestroyed()) {\n      state.destroy();\n    }\n\n    if (!element.isDestroyed()) {\n      element.destroy();\n    }\n  },\n  provide: function provide(element, props, state) {\n    var _a;\n\n    return _a = {\n      cesiumWidget: element,\n      scene: element.scene,\n      camera: element.scene.camera,\n      imageryLayerCollection: element.scene.globe.imageryLayers,\n      primitiveCollection: element.scene.primitives,\n      globe: element.scene.globe\n    }, _a[eventManagerContextKey] = state, _a;\n  },\n  containerProps: function containerProps(_a) {\n    var id = _a.id,\n        className = _a.className,\n        style = _a.style,\n        full = _a.full,\n        containerProps = _a.containerProps;\n    return _assign({\n      className: className,\n      id: id,\n      style: _assign(_assign({}, full ? {\n        position: \"absolute\",\n        bottom: \"0\",\n        left: \"0\",\n        right: \"0\",\n        top: \"0\"\n      } : {}), style)\n    }, containerProps);\n  },\n  cesiumProps: cesiumProps$6,\n  cesiumReadonlyProps: cesiumReadonlyProps$1,\n  renderContainer: true,\n  useCommonEvent: true,\n  useRootEvent: true\n});\nvar cesiumEventProps$4 = {\n  onStop: \"onStop\",\n  onTick: \"onTick\"\n};\nvar cesiumProps$7 = [\"canAnimate\", \"clockRange\", \"clockStep\", \"currentTime\", \"multiplier\", \"shouldAnimate\", \"startTime\", \"stopTime\"];\nvar Clock = createCesiumComponent({\n  name: \"Clock\",\n  create: function create(ctx) {\n    var _a;\n\n    return (_a = ctx.cesiumWidget) === null || _a === void 0 ? void 0 : _a.clock;\n  },\n  cesiumProps: cesiumProps$7,\n  cesiumEventProps: cesiumEventProps$4,\n  setCesiumPropsAfterCreate: true\n});\nvar cesiumProps$8 = [\"positions\", \"width\", \"cornerType\", \"height\", \"heightReference\", \"extrudedHeight\", \"extrudedHeightReference\", \"show\", \"fill\", \"material\", \"outline\", \"outlineColor\", \"outlineWidth\", \"granularity\", \"shadows\", \"distanceDisplayCondition\", \"zIndex\", \"classificationType\"];\nvar cesiumEventProps$5 = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar CorridorGraphics = createCesiumComponent({\n  name: \"CorridorGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new CorridorGraphics$1(props);\n\n    if (props.classificationType) {\n      element.classificationType = props.classificationType;\n    }\n\n    context.entity.corridor = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.corridor = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$8,\n  cesiumEventProps: cesiumEventProps$5\n});\nvar cesiumProps$9 = [\"clustering\", \"name\", \"show\", \"clock\"];\nvar cesiumEventProps$6 = {\n  onChange: \"changedEvent\",\n  onError: \"ErrorEvent\",\n  onLoading: \"loadingEvent\"\n};\nvar CustomDataSource = createCesiumComponent({\n  name: \"CustomDataSource\",\n  create: function create(context, props) {\n    if (!context.dataSourceCollection) return;\n    var element = new CustomDataSource$1(props.name);\n\n    if (props.clustering) {\n      element.clustering = props.clustering;\n    }\n\n    if (typeof props.show === \"boolean\") {\n      element.show = props.show;\n    }\n\n    if (typeof props.clock !== \"undefined\") {\n      element.clock = props.clock;\n    }\n\n    context.dataSourceCollection.add(element);\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.dataSourceCollection && !context.dataSourceCollection.isDestroyed()) {\n      context.dataSourceCollection.remove(element);\n    }\n  },\n  provide: function provide(element) {\n    return {\n      entityCollection: element.entities,\n      dataSource: element\n    };\n  },\n  cesiumProps: cesiumProps$9,\n  cesiumEventProps: cesiumEventProps$6\n});\nvar cesiumProps$a = [\"heightReference\", \"length\", \"topRadius\", \"bottomRadius\", \"show\", \"fill\", \"material\", \"outline\", \"outlineColor\", \"outlineWidth\", \"numberOfVerticalLines\", \"slices\", \"shadowMode\", \"distanceDisplayCondition\"];\nvar cesiumEventProps$7 = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar CylinderGraphics = createCesiumComponent({\n  name: \"CylinderGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new CylinderGraphics$1(props);\n    context.entity.cylinder = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.cylinder = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$a,\n  cesiumEventProps: cesiumEventProps$7\n});\nvar cesiumProps$b = [\"clustering\"];\nvar cesiumReadonlyProps$2 = [\"name\"];\nvar cesiumEventProps$8 = {\n  onChange: \"changedEvent\",\n  onError: \"ErrorEvent\",\n  onLoading: \"loadingEvent\"\n};\n\nvar load = function load(_a) {\n  var element = _a.element,\n      data = _a.data,\n      onLoad = _a.onLoad,\n      sourceUri = _a.sourceUri,\n      credit = _a.credit;\n  element.load(data, {\n    sourceUri: sourceUri,\n    credit: credit\n  }).then(function (value) {\n    if (onLoad) {\n      onLoad(value);\n    }\n  });\n};\n\nvar CzmlDataSource = createCesiumComponent({\n  name: \"CzmlDataSource\",\n  create: function create(context, props) {\n    if (!context.dataSourceCollection) return;\n    var element = new CzmlDataSource$1(props.name);\n\n    if (props.clustering) {\n      element.clustering = props.clustering;\n    }\n\n    if (typeof props.show === \"boolean\") {\n      element.show = props.show;\n    }\n\n    context.dataSourceCollection.add(element);\n\n    if (props.data) {\n      load({\n        element: element,\n        dataSources: context.dataSourceCollection,\n        data: props.data,\n        onLoad: props.onLoad,\n        sourceUri: props.sourceUri,\n        credit: props.credit\n      });\n    }\n\n    return element;\n  },\n  update: function update(element, props, prevProps, context) {\n    if (!props.data) {\n      element.show = false;\n    } else if (prevProps.show !== props.show) {\n      element.show = typeof props.show === \"boolean\" ? props.show : true;\n    }\n\n    if (context.dataSourceCollection && props.data && (prevProps.data !== props.data || prevProps.sourceUri !== props.sourceUri || prevProps.credit !== props.credit)) {\n      load({\n        element: element,\n        dataSources: context.dataSourceCollection,\n        data: props.data,\n        onLoad: props.onLoad,\n        sourceUri: props.sourceUri,\n        credit: props.credit\n      });\n    }\n  },\n  destroy: function destroy(element, context) {\n    if (context.dataSourceCollection && !context.dataSourceCollection.isDestroyed()) {\n      context.dataSourceCollection.remove(element);\n    }\n  },\n  provide: function provide(element) {\n    return {\n      dataSource: element\n    };\n  },\n  cesiumProps: cesiumProps$b,\n  cesiumReadonlyProps: cesiumReadonlyProps$2,\n  cesiumEventProps: cesiumEventProps$8\n});\nvar cesiumProps$c = [\"semiMajorAxis\", \"semiMinorAxis\", \"height\", \"heightReference\", \"extrudedHeight\", \"show\", \"fill\", \"material\", \"outline\", \"outlineColor\", \"outlineWidth\", \"numberOfVerticalLines\", \"rotation\", \"stRotation\", \"granularity\", \"shadows\", \"distanceDisplayCondition\", \"zIndex\", \"classificationType\"];\nvar cesiumEventProps$9 = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar EllipseGraphics = createCesiumComponent({\n  name: \"EllipseGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new EllipseGraphics$1(props);\n\n    if (props.classificationType) {\n      element.classificationType = props.classificationType;\n    }\n\n    context.entity.ellipse = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.ellipse = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$c,\n  cesiumEventProps: cesiumEventProps$9\n});\nvar cesiumProps$d = [\"heightReference\", \"radii\", \"show\", \"fill\", \"innerRadii\", \"material\", \"maximumClock\", \"maximumCone\", \"minimumClock\", \"minimumCone\", \"outline\", \"outlineColor\", \"outlineWidth\", \"subdivisions\", \"stackPartitions\", \"slicePartitions\", \"shadows\", \"distanceDisplayCondition\"];\nvar cesiumEventProps$a = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar EllipsoidGraphics = createCesiumComponent({\n  name: \"EllipsoidGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new EllipsoidGraphics$1(props);\n    context.entity.ellipsoid = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.ellipsoid = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$d,\n  cesiumEventProps: cesiumEventProps$a\n});\nvar cesiumProps$e = [\"availability\", \"billboard\", \"box\", \"corridor\", \"cylinder\", \"description\", \"ellipse\", \"ellipsoid\", \"label\", \"model\", \"name\", \"orientation\", \"path\", \"plane\", \"point\", \"polygon\", \"polyline\", \"polylineVolume\", \"position\", \"properties\", \"rectangle\", \"show\", \"viewFrom\", \"wall\"];\nvar cesiumReadonlyProps$3 = [\"id\"];\nvar cesiumEventProps$b = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar Entity = createCesiumComponent({\n  name: \"Entity\",\n  create: function create(context, props) {\n    if (!context.entityCollection) return;\n    var element = new Entity$1(props);\n\n    if (context.viewer && props.selected) {\n      context.viewer.selectedEntity = element;\n    }\n\n    if (context.viewer && props.tracked) {\n      context.viewer.trackedEntity = element;\n    }\n\n    context.entityCollection.add(element);\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entityCollection) {\n      context.entityCollection.remove(element);\n    }\n  },\n  update: function update(element, props, prevProps, context) {\n    if (context.viewer) {\n      if (props.selected !== prevProps.selected) {\n        if (props.selected) {\n          context.viewer.selectedEntity = element;\n        } else if (context.viewer.selectedEntity === element) {\n          context.viewer.selectedEntity = undefined;\n        }\n      }\n\n      if (props.tracked !== prevProps.tracked) {\n        if (props.tracked) {\n          context.viewer.trackedEntity = element;\n        } else if (context.viewer.trackedEntity === element) {\n          context.viewer.trackedEntity = undefined;\n        }\n      }\n    }\n  },\n  provide: function provide(element) {\n    return {\n      entity: element\n    };\n  },\n  cesiumProps: cesiumProps$e,\n  cesiumReadonlyProps: cesiumReadonlyProps$3,\n  cesiumEventProps: cesiumEventProps$b,\n  useCommonEvent: true\n});\n\nvar EntityDescription = function EntityDescription(_a) {\n  var children = _a.children,\n      container = _a.container,\n      _b = _a.resizeInfoBox,\n      resizeInfoBox = _b === void 0 ? true : _b;\n\n  var _c = useCesium(),\n      viewer = _c.viewer,\n      entity = _c.entity;\n\n  var _d = useState(false),\n      selected = _d[0],\n      setSelected = _d[1];\n\n  var c = useMemo(function () {\n    var _a, _b;\n\n    return container !== null && container !== void 0 ? container : (_b = (_a = viewer) === null || _a === void 0 ? void 0 : _a.infoBox.frame.contentDocument) === null || _b === void 0 ? void 0 : _b.createElement(\"div\");\n  }, [container, viewer]);\n  useEffect(function () {\n    if (!viewer || !entity) return;\n\n    var ev = function ev(e) {\n      setSelected(!!e && e.id === entity.id);\n    };\n\n    viewer.selectedEntityChanged.addEventListener(ev);\n    return function () {\n      viewer.selectedEntityChanged.removeEventListener(ev);\n    };\n  }, [entity, viewer]);\n  useEffect(function () {\n    var _a, _b, _c;\n\n    if (container || !c || !viewer) return;\n    var frame = (_a = viewer.infoBox) === null || _a === void 0 ? void 0 : _a.frame;\n    var parent = (_c = (_b = frame) === null || _b === void 0 ? void 0 : _b.contentDocument) === null || _c === void 0 ? void 0 : _c.querySelector(\".cesium-infoBox-description\");\n    if (!frame || !parent) return;\n\n    if (selected) {\n      parent.appendChild(c);\n\n      if (resizeInfoBox) {\n        frame.style.display = \"block\";\n        frame.style.height = parent.getBoundingClientRect().height + \"px\";\n        delete frame.style.display;\n      }\n    } else if (c.parentElement === parent) {\n      parent.removeChild(c);\n    }\n  }, [c, container, resizeInfoBox, selected, viewer]);\n  return c ? createPortal(!container || selected ? children : null, c) : null;\n};\n\nvar renderToStaticMarkup = require(\"react-dom/server.browser\").renderToStaticMarkup;\n\nvar EntityStaticDescription = function EntityStaticDescription(_a) {\n  var children = _a.children;\n  var entity = useCesium().entity;\n  useEffect(function () {\n    if (!entity || !children) return;\n    entity.description = new ConstantProperty(renderToStaticMarkup(children));\n    return function () {\n      if (!entity) return;\n      entity.description = undefined;\n    };\n  }, [children, entity]);\n  return null;\n};\n\nvar cesiumProps$f = [\"density\", \"enabled\", \"minimumBrightness\", \"screenSpaceErrorFactor\"];\nvar Fog = createCesiumComponent({\n  name: \"Fog\",\n  create: function create(context) {\n    if (!context.scene) return;\n    var element = new Fog$1();\n    context.scene.fog = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.scene && !context.scene.isDestroyed()) {\n      context.scene.fog = new Fog$1();\n    }\n  },\n  cesiumProps: cesiumProps$f,\n  setCesiumPropsAfterCreate: true\n});\nvar cesiumProps$g = [\"clustering\", \"name\"];\nvar cesiumEventProps$c = {\n  onChange: \"changedEvent\",\n  onError: \"ErrorEvent\",\n  onLoading: \"loadingEvent\"\n};\n\nvar load$1 = function load$1(_a) {\n  var element = _a.element,\n      data = _a.data,\n      onLoad = _a.onLoad,\n      clampToGround = _a.clampToGround,\n      sourceUri = _a.sourceUri,\n      credit = _a.credit,\n      markerSize = _a.markerSize,\n      markerSymbol = _a.markerSymbol,\n      markerColor = _a.markerColor,\n      stroke = _a.stroke,\n      strokeWidth = _a.strokeWidth,\n      fill = _a.fill,\n      describe = _a.describe;\n  element.load(data, {\n    clampToGround: clampToGround,\n    markerSize: markerSize,\n    markerSymbol: markerSymbol,\n    markerColor: markerColor,\n    stroke: stroke,\n    strokeWidth: strokeWidth,\n    fill: fill,\n    sourceUri: sourceUri,\n    describe: describe,\n    credit: credit\n  }).then(function (value) {\n    if (onLoad) {\n      onLoad(value);\n    }\n  });\n};\n\nvar GeoJsonDataSource = createCesiumComponent({\n  name: \"GeoJsonDataSource\",\n  create: function create(context, props) {\n    if (!context.dataSourceCollection) return;\n    var element = new GeoJsonDataSource$1(props.name);\n\n    if (props.clustering) {\n      element.clustering = props.clustering;\n    }\n\n    if (typeof props.show === \"boolean\") {\n      element.show = props.show;\n    }\n\n    context.dataSourceCollection.add(element);\n\n    if (props.data) {\n      load$1({\n        element: element,\n        dataSources: context.dataSourceCollection,\n        data: props.data,\n        onLoad: props.onLoad,\n        clampToGround: props.clampToGround,\n        sourceUri: props.sourceUri,\n        markerSize: props.markerSize,\n        markerSymbol: props.markerSymbol,\n        markerColor: props.markerColor,\n        stroke: props.stroke,\n        strokeWidth: props.strokeWidth,\n        fill: props.fill,\n        describe: props.describe,\n        credit: props.credit\n      });\n    }\n\n    return element;\n  },\n  update: function update(element, props, prevProps, context) {\n    if (!props.data) {\n      element.show = false;\n    } else if (prevProps.show !== props.show) {\n      element.show = typeof props.show === \"boolean\" ? props.show : true;\n    }\n\n    if (context.dataSourceCollection && props.data && (prevProps.data !== props.data || prevProps.clampToGround !== props.clampToGround || prevProps.sourceUri !== props.sourceUri || prevProps.credit !== props.credit || prevProps.markerSize !== props.markerSize || prevProps.markerSymbol !== props.markerSymbol || prevProps.markerColor !== props.markerColor || prevProps.stroke !== props.stroke || prevProps.strokeWidth !== props.strokeWidth || prevProps.fill !== props.fill)) {\n      load$1({\n        element: element,\n        dataSources: context.dataSourceCollection,\n        data: props.data,\n        onLoad: props.onLoad,\n        clampToGround: props.clampToGround,\n        sourceUri: props.sourceUri,\n        credit: props.credit,\n        markerSize: props.markerSize,\n        markerSymbol: props.markerSymbol,\n        markerColor: props.markerColor,\n        stroke: props.stroke,\n        strokeWidth: props.strokeWidth,\n        fill: props.fill,\n        describe: props.describe\n      });\n    }\n  },\n  destroy: function destroy(element, context) {\n    if (context.dataSourceCollection && !context.dataSourceCollection.isDestroyed()) {\n      context.dataSourceCollection.remove(element);\n    }\n  },\n  provide: function provide(element) {\n    return {\n      dataSource: element\n    };\n  },\n  cesiumProps: cesiumProps$g,\n  cesiumEventProps: cesiumEventProps$c\n});\nvar cesiumEventProps$d = {\n  onImageryLayersUpdate: \"imageryLayersUpdatedEvent\",\n  onTerrainProviderChange: \"terrainProviderChanged\",\n  onTileLoadProgress: \"tileLoadProgressEvent\"\n};\nvar cesiumProps$h = [\"atmosphereBrightnessShift\", \"atmosphereHueShift\", \"atmosphereSaturationShift\", \"backFaceCulling\", \"baseColor\", \"clippingPlanes\", \"depthTestAgainstTerrain\", \"enableLighting\", \"lightingFadeInDistance\", \"lightingFadeOutDistance\", \"material\", \"maximumScreenSpaceError\", \"nightFadeInDistance\", \"nightFadeOutDistance\", \"oceanNormalMapUrl\", \"shadows\", \"show\", \"showGroundAtmosphere\", \"showWaterEffect\", \"terrainProvider\", \"tileCacheSize\"];\nvar Globe = createCesiumComponent({\n  name: \"Globe\",\n  create: function create(context) {\n    var _a;\n\n    return (_a = context.scene) === null || _a === void 0 ? void 0 : _a.globe;\n  },\n  cesiumProps: cesiumProps$h,\n  cesiumEventProps: cesiumEventProps$d,\n  setCesiumPropsAfterCreate: true\n});\nvar cesiumProps$i = [\"appearance\", \"classificationType\", \"debugShowBoundingVolume\", \"debugShowShadowVolume\", \"depthFailAppearance\", \"show\"];\nvar cesiumReadonlyProps$4 = [\"allowPicking\", \"asynchronous\", \"compressVertices\", \"geometryInstances\", \"interleave\", \"releaseGeometryInstances\", \"vertexCacheOptimize\"];\nvar GroundPrimitive = createCesiumComponent({\n  name: \"GroundPrimitive\",\n  create: function create(context, props) {\n    if (!context.primitiveCollection) return;\n    var element = new GroundPrimitive$1(props);\n\n    if (props.onReady) {\n      element.readyPromise.then(props.onReady);\n    }\n\n    context.primitiveCollection.add(element);\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.primitiveCollection && !context.primitiveCollection.isDestroyed()) {\n      context.primitiveCollection.remove(element);\n    }\n\n    if (!element.isDestroyed()) {\n      element.destroy();\n    }\n  },\n  cesiumProps: cesiumProps$i,\n  cesiumReadonlyProps: cesiumReadonlyProps$4,\n  useCommonEvent: true\n});\nvar cesiumProps$j = [\"show\"];\nvar GroundPrimitiveCollection = createCesiumComponent({\n  name: \"GroundPrimitiveCollection\",\n  create: function create(context) {\n    var _a;\n\n    return (_a = context.scene) === null || _a === void 0 ? void 0 : _a.groundPrimitives;\n  },\n  provide: function provide(element) {\n    return {\n      primitiveCollection: element\n    };\n  },\n  cesiumProps: cesiumProps$j,\n  setCesiumPropsAfterCreate: true\n});\nvar cesiumProps$k = [\"alpha\", \"brightness\", \"contrast\", \"hue\", \"saturation\", \"gamma\", \"splitDirection\", \"minificationFilter\", \"magnificationFilter\", \"cutoutRectangle\", \"show\"];\nvar cesiumReadonlyProps$5 = [\"imageryProvider\", \"rectangle\", \"maximumAnisotropy\", \"minimumTerrainLevel\", \"maximumTerrainLevel\"];\nvar ImageryLayer = createCesiumComponent({\n  name: \"ImageryLayer\",\n  create: function create(context, props) {\n    if (!context.imageryLayerCollection) return;\n    var element = new ImageryLayer$1(props.imageryProvider, {\n      rectangle: props.rectangle,\n      alpha: props.alpha,\n      brightness: props.brightness,\n      contrast: props.contrast,\n      hue: props.hue,\n      saturation: props.saturation,\n      gamma: props.gamma,\n      splitDirection: props.splitDirection,\n      minificationFilter: props.minificationFilter,\n      magnificationFilter: props.magnificationFilter,\n      show: props.show,\n      maximumAnisotropy: props.maximumAnisotropy,\n      minimumTerrainLevel: props.minimumTerrainLevel,\n      maximumTerrainLevel: props.maximumTerrainLevel,\n      cutoutRectangle: props.cutoutRectangle\n    });\n    context.imageryLayerCollection.add(element);\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.imageryLayerCollection) {\n      context.imageryLayerCollection.remove(element);\n    }\n  },\n  cesiumProps: cesiumProps$k,\n  cesiumReadonlyProps: cesiumReadonlyProps$5\n});\nvar cesiumEventProps$e = {\n  onLayerAdd: \"layerAdded\",\n  onLayerMove: \"layerMoved\",\n  onLayerRemove: \"layerRemoved\",\n  onLayerShowOrHide: \"layerShownOrHidden\"\n};\nvar ImageryLayerCollection = createCesiumComponent({\n  name: \"ImageryLayerCollection\",\n  create: function create(context) {\n    var _a;\n\n    return (_a = context.globe) === null || _a === void 0 ? void 0 : _a.imageryLayers;\n  },\n  cesiumEventProps: cesiumEventProps$e\n});\nvar cesiumProps$l = [\"clustering\", \"name\"];\nvar cesiumReadonlyProps$6 = [\"camera\", \"canvas\", \"ellipsoid\"];\nvar cesiumEventProps$f = {\n  onChange: \"changedEvent\",\n  onError: \"ErrorEvent\",\n  onLoading: \"loadingEvent\",\n  onRefresh: \"refreshEvent\",\n  onUnsupportedNode: \"unsupportedNodeEvent\"\n};\n\nvar load$2 = function load$2(_a) {\n  var element = _a.element,\n      data = _a.data,\n      onLoad = _a.onLoad,\n      clampToGround = _a.clampToGround,\n      ellipsoid = _a.ellipsoid,\n      sourceUri = _a.sourceUri,\n      credit = _a.credit;\n  element.load(data, {\n    clampToGround: clampToGround,\n    ellipsoid: ellipsoid,\n    sourceUri: sourceUri,\n    credit: credit\n  }).then(function (value) {\n    if (onLoad) {\n      onLoad(value);\n    }\n  });\n};\n\nvar KmlDataSource = createCesiumComponent({\n  name: \"KmlDataSource\",\n  create: function create(context, props) {\n    if (!context.scene || !context.dataSourceCollection) return;\n    var element = new KmlDataSource$1({\n      camera: props.camera || context.scene.camera,\n      canvas: props.canvas || context.scene.canvas,\n      ellipsoid: props.ellipsoid\n    });\n\n    if (props.clustering) {\n      element.clustering = props.clustering;\n    }\n\n    if (typeof props.show === \"boolean\") {\n      element.show = props.show;\n    }\n\n    if (typeof props.name !== \"undefined\") {\n      element.name = props.name;\n    }\n\n    context.dataSourceCollection.add(element);\n\n    if (props.data) {\n      load$2({\n        element: element,\n        dataSources: context.dataSourceCollection,\n        data: props.data,\n        onLoad: props.onLoad,\n        clampToGround: props.clampToGround,\n        ellipsoid: props.ellipsoid,\n        sourceUri: props.sourceUri,\n        credit: props.credit\n      });\n    }\n\n    return element;\n  },\n  update: function update(element, props, prevProps, context) {\n    if (!props.data) {\n      element.show = false;\n    } else if (prevProps.show !== props.show) {\n      element.show = typeof props.show === \"boolean\" ? props.show : true;\n    }\n\n    if (context.dataSourceCollection && props.data && (prevProps.data !== props.data || prevProps.clampToGround !== props.clampToGround || prevProps.ellipsoid !== props.ellipsoid || prevProps.sourceUri !== props.sourceUri || prevProps.credit !== prevProps.credit)) {\n      load$2({\n        element: element,\n        dataSources: context.dataSourceCollection,\n        data: props.data,\n        onLoad: props.onLoad,\n        clampToGround: props.clampToGround,\n        ellipsoid: props.ellipsoid,\n        sourceUri: props.sourceUri,\n        credit: props.credit\n      });\n    }\n  },\n  destroy: function destroy(element, context) {\n    if (context.dataSourceCollection && !context.dataSourceCollection.isDestroyed()) {\n      context.dataSourceCollection.remove(element);\n    }\n  },\n  provide: function provide(element) {\n    return {\n      dataSource: element\n    };\n  },\n  cesiumProps: cesiumProps$l,\n  cesiumReadonlyProps: cesiumReadonlyProps$6,\n  cesiumEventProps: cesiumEventProps$f\n});\nvar cesiumProps$m = [\"backgroundColor\", \"backgroundPadding\", \"disableDepthTestDistance\", \"distanceDisplayCondition\", \"eyeOffset\", \"fillColor\", \"font\", \"heightReference\", \"horizontalOrigin\", \"id\", \"outlineColor\", \"outlineWidth\", \"pixelOffset\", \"pixelOffsetScaleByDistance\", \"position\", \"scale\", \"scaleByDistance\", \"show\", \"showBackground\", \"style\", \"text\", \"translucencyByDistance\", \"verticalOrigin\"];\nvar Label = createCesiumComponent({\n  name: \"Label\",\n  create: function create(context, props) {\n    var _a;\n\n    return (_a = context.labelCollection) === null || _a === void 0 ? void 0 : _a.add(props);\n  },\n  destroy: function destroy(element, context) {\n    if (context.labelCollection && !context.labelCollection.isDestroyed()) {\n      context.labelCollection.remove(element);\n    }\n  },\n  cesiumProps: cesiumProps$m,\n  useCommonEvent: true\n});\nvar cesiumProps$n = [\"blendOption\", \"debugShowBoundingVolume\", \"modelMatrix\"];\nvar LabelCollection = createCesiumComponent({\n  name: \"LabelCollection\",\n  create: function create(context, props) {\n    if (!context.scene || !context.primitiveCollection) return;\n    var element = new LabelCollection$1({\n      scene: context.scene,\n      modelMatrix: props.modelMatrix,\n      blendOption: props.blendOption,\n      debugShowBoundingVolume: props.debugShowBoundingVolume\n    });\n    context.primitiveCollection.add(element);\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.primitiveCollection && !context.primitiveCollection.isDestroyed()) {\n      context.primitiveCollection.remove(element);\n    }\n\n    if (!element.isDestroyed()) {\n      element.destroy();\n    }\n  },\n  provide: function provide(element) {\n    return {\n      labelCollection: element\n    };\n  },\n  cesiumProps: cesiumProps$n\n});\nvar cesiumProps$o = [\"text\", \"font\", \"style\", \"fillColor\", \"outlineColor\", \"outlineWidth\", \"show\", \"showBackground\", \"backgroundColor\", \"backgroundPadding\", \"scale\", \"horizontalOrigin\", \"verticalOrigin\", \"eyeOffset\", \"pixelOffset\", \"translucencyByDistance\", \"pixelOffsetScaleByDistance\", \"scaleByDistance\", \"heightReference\", \"distanceDisplayCondition\", \"disableDepthTestDistance\"];\nvar cesiumEventProps$g = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar LabelGraphics = createCesiumComponent({\n  name: \"LabelGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new LabelGraphics$1(props);\n    context.entity.label = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.label = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$o,\n  cesiumEventProps: cesiumEventProps$g\n});\nvar cesiumProps$p = [\"basePath\", \"clampAnimations\", \"clippingPlanes\", \"color\", \"colorBlendAmount\", \"colorBlendMode\", \"debugShowBoundingVolume\", \"debugWireframe\", \"dequantizeInShader\", \"distanceDisplayCondition\", \"id\", \"imageBasedLightingFactor\", \"lightColor\", \"maximumScale\", \"minimumPixelSize\", \"modelMatrix\", \"scale\", \"scene\", \"shadows\", \"show\", \"silhouetteColor\", \"silhouetteSize\", \"luminanceAtZenith\", \"sphericalHarmonicCoefficients\", \"specularEnvironmentMaps\"];\nvar cesiumReadonlyProps$7 = [\"allowPicking\", \"asynchronous\", \"gltf\", \"incrementallyLoadTextures\", \"url\", \"credit\"];\nvar Model = createCesiumComponent({\n  name: \"Model\",\n  create: function create(context, props) {\n    if (!context.primitiveCollection) return;\n    var element = props.url ? Model$1.fromGltf(props) : new Model$1(props);\n\n    if (props.onReady) {\n      element.readyPromise.then(props.onReady);\n    }\n\n    context.primitiveCollection.add(element);\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.primitiveCollection && !context.primitiveCollection.isDestroyed()) {\n      context.primitiveCollection.remove(element);\n    }\n\n    if (!element.isDestroyed()) {\n      element.destroy();\n    }\n  },\n  cesiumProps: cesiumProps$p,\n  cesiumReadonlyProps: cesiumReadonlyProps$7,\n  useCommonEvent: true\n});\nvar cesiumProps$q = [\"uri\", \"show\", \"scale\", \"minimumPixelSize\", \"maximumScale\", \"incrementallyLoadTextures\", \"runAnimations\", \"clampAnimations\", \"nodeTransformations\", \"shadows\", \"heightReference\", \"distanceDisplayCondition\", \"silhouetteColor\", \"silhouetteSize\", \"color\", \"colorBlendMode\", \"colorBlendAmount\", \"clippingPlanes\", \"imageBasedLightingFactor\", \"lightColor\"];\nvar cesiumEventProps$h = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar ModelGraphics = createCesiumComponent({\n  name: \"ModelGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new ModelGraphics$1(props);\n    context.entity.model = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.model = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$q,\n  cesiumEventProps: cesiumEventProps$h\n});\nvar cesiumProps$r = [\"onlySunLighting\", \"show\", \"textureUrl\"];\nvar cesiumReadonlyProps$8 = [\"ellipsoid\"];\nvar Moon = createCesiumComponent({\n  name: \"Moon\",\n  create: function create(context, props) {\n    if (!context.scene) return;\n    var element = new Moon$1(props);\n    context.scene.moon = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.scene && !context.scene.isDestroyed()) {\n      context.scene.moon = new Moon$1();\n    }\n  },\n  cesiumProps: cesiumProps$r,\n  cesiumReadonlyProps: cesiumReadonlyProps$8\n});\nvar cesiumProps$s = [\"show\", \"emitter\", \"modelMatrix\", \"emitterModelMatrix\", \"emissionRate\", \"bursts\", \"loop\", \"scale\", \"startScale\", \"endScale\", \"color\", \"startColor\", \"endColor\", \"image\", \"imageSize\", \"minimumImageSize\", \"maximumImageSize\", \"speed\", \"minimumSpeed\", \"maximumSpeed\", \"lifetime\", \"particleLife\", \"minimumParticleLife\", \"maximumParticleLife\", \"mass\", \"minimumMass\", \"maximumMass\"];\nvar cesiumEventProps$i = {\n  onComplete: \"complete\"\n};\nvar ParticleSystem = createCesiumComponent({\n  name: \"ParticleSystem\",\n  create: function create(context, props) {\n    if (!context.primitiveCollection) return;\n    var element = new ParticleSystem$1(_assign(_assign({}, props), {\n      updateCallback: props.onUpdate\n    }));\n    context.primitiveCollection.add(element);\n    return element;\n  },\n  update: function update(element, props, prevProps) {\n    if (props.onUpdate !== prevProps.onUpdate) {\n      element.updateCallback = props.onUpdate;\n    }\n  },\n  destroy: function destroy(element, context) {\n    if (context.primitiveCollection && !context.primitiveCollection.isDestroyed) {\n      context.primitiveCollection.remove(element);\n    }\n  },\n  cesiumProps: cesiumProps$s,\n  cesiumEventProps: cesiumEventProps$i\n});\nvar cesiumProps$t = [\"leadTime\", \"trailTime\", \"show\", \"width\", \"material\", \"resolution\", \"distanceDisplayCondition\"];\nvar cesiumEventProps$j = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar PathGraphics = createCesiumComponent({\n  name: \"PathGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new PathGraphics$1(props);\n    context.entity.path = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.path = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$t,\n  cesiumEventProps: cesiumEventProps$j\n});\nvar cesiumProps$u = [\"plane\", \"dimensions\", \"show\", \"fill\", \"material\", \"outline\", \"outlineColor\", \"outlineWidth\", \"shadows\", \"distanceDisplayCondition\"];\nvar cesiumEventProps$k = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar PlaneGraphics = createCesiumComponent({\n  name: \"PlaneGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new PlaneGraphics$1(props);\n    context.entity.plane = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.plane = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$u,\n  cesiumEventProps: cesiumEventProps$k\n});\nvar cesiumProps$v = [\"color\", \"pixelSize\", \"outlineColor\", \"outlineWidth\", \"show\", \"scaleByDistance\", \"translucencyByDistance\", \"heightReference\", \"distanceDisplayCondition\", \"disableDepthTestDistance\"];\nvar cesiumEventProps$l = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar PointGraphics = createCesiumComponent({\n  name: \"PointGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new PointGraphics$1(props);\n    context.entity.point = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.point = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$v,\n  cesiumEventProps: cesiumEventProps$l\n});\nvar cesiumProps$w = [\"color\", \"disableDepthTestDistance\", \"distanceDisplayCondition\", \"id\", \"outlineColor\", \"outlineWidth\", \"pixelSize\", \"position\", \"scaleByDistance\", \"show\", \"translucencyByDistance\"];\nvar PointPrimitive = createCesiumComponent({\n  name: \"PointPrimitive\",\n  create: function create(context, props) {\n    var _a;\n\n    return (_a = context.pointPrimitiveCollection) === null || _a === void 0 ? void 0 : _a.add(props);\n  },\n  destroy: function destroy(element, context) {\n    if (context.pointPrimitiveCollection && !context.pointPrimitiveCollection.isDestroyed()) {\n      context.pointPrimitiveCollection.remove(element);\n    }\n  },\n  cesiumProps: cesiumProps$w,\n  useCommonEvent: true\n});\nvar cesiumProps$x = [\"blendOption\", \"debugShowBoundingVolume\", \"modelMatrix\"];\nvar PointPrimitiveCollection = createCesiumComponent({\n  name: \"PointPrimitveCollection\",\n  create: function create(context, props) {\n    if (!context.primitiveCollection) return;\n    var element = new PointPrimitiveCollection$1(props);\n    context.primitiveCollection.add(element);\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.primitiveCollection && !context.primitiveCollection.isDestroyed()) {\n      context.primitiveCollection.remove(element);\n    }\n\n    if (!element.isDestroyed()) {\n      element.destroy();\n    }\n  },\n  provide: function provide(element) {\n    return {\n      pointPrimitiveCollection: element\n    };\n  },\n  cesiumProps: cesiumProps$x\n});\nvar cesiumProps$y = [\"hierarchy\", \"height\", \"heightReference\", \"extrudedHeight\", \"extrudedHeightReference\", \"show\", \"fill\", \"material\", \"outline\", \"outlineColor\", \"outlineWidth\", \"stRotation\", \"granularity\", \"perPositionHeight\", \"closeTop\", \"closeBottom\", \"shadows\", \"distanceDisplayCondition\", \"zIndex\", \"classificationType\"];\nvar cesiumEventProps$m = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar PolygonGraphics = createCesiumComponent({\n  name: \"PolygonGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new PolygonGraphics$1(props);\n    context.entity.polygon = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.polygon = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$y,\n  cesiumEventProps: cesiumEventProps$m\n});\nvar cesiumProps$z = [\"distanceDisplayCondition\", \"id\", \"loop\", \"material\", \"positions\", \"show\", \"width\"];\nvar Polyline = createCesiumComponent({\n  name: \"Polyline\",\n  create: function create(context, props) {\n    var _a;\n\n    return (_a = context.polylineCollection) === null || _a === void 0 ? void 0 : _a.add(props);\n  },\n  destroy: function destroy(element, context) {\n    if (context.polylineCollection && !context.polylineCollection.isDestroyed()) {\n      context.polylineCollection.remove(element);\n    }\n  },\n  cesiumProps: cesiumProps$z,\n  useCommonEvent: true\n});\nvar cesiumProps$A = [\"debugShowBoundingVolume\", \"length\", \"modelMatrix\"];\nvar PolylineCollection = createCesiumComponent({\n  name: \"PolylineCollection\",\n  create: function create(context, props) {\n    if (!context.primitiveCollection) return;\n    var element = new PolylineCollection$1({\n      modelMatrix: props.modelMatrix,\n      debugShowBoundingVolume: props.debugShowBoundingVolume,\n      length: props.length,\n      scene: context.scene\n    });\n    context.primitiveCollection.add(element);\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.primitiveCollection && !context.primitiveCollection.isDestroyed()) {\n      context.primitiveCollection.remove(element);\n    }\n\n    if (!element.isDestroyed()) {\n      element.destroy();\n    }\n  },\n  provide: function provide(element) {\n    return {\n      polylineCollection: element\n    };\n  },\n  cesiumProps: cesiumProps$A\n});\nvar cesiumProps$B = [\"positions\", \"followSurface\", \"clampToGround\", \"width\", \"show\", \"material\", \"depthFailMaterial\", \"granularity\", \"shadows\", \"distanceDisplayCondition\", \"zIndex\"];\nvar cesiumEventProps$n = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar PolylineGraphics = createCesiumComponent({\n  name: \"PolylineGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new PolylineGraphics$1(props);\n    context.entity.polyline = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.polyline = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$B,\n  cesiumEventProps: cesiumEventProps$n\n});\nvar cesiumProps$C = [\"positions\", \"shape\", \"cornerType\", \"show\", \"fill\", \"material\", \"outline\", \"outlineColor\", \"outlineWidth\", \"granularity\", \"shadows\", \"distanceDisplayCondition\"];\nvar cesiumEventProps$o = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar PolylineVolumeGraphics = createCesiumComponent({\n  name: \"PolylineVolumeGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new PolylineVolumeGraphics$1(props);\n    context.entity.polylineVolume = element;\n    return element;\n  },\n  destroy: function destroy(contextelement, context) {\n    if (context.entity) {\n      context.entity.polylineVolume = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$C,\n  cesiumEventProps: cesiumEventProps$o\n});\nvar cesiumProps$D = [\"enabled\", \"selected\"];\nvar cesiumReadonlyProps$9 = [\"clearColor\", \"forcePowerOfTwo\", \"fragmentShader\", \"name\", \"pixelDatatype\", \"pixelFormat\", \"sampleMode\", \"scissorRectangle\", \"textureScale\", \"uniforms\"];\nvar PostProcessStage = createCesiumComponent({\n  name: \"PostProcessStage\",\n  create: function create(context, props) {\n    if (!context.scene) return;\n    var element = new PostProcessStage$1(props);\n\n    if (typeof props.enabled === \"boolean\") {\n      element.enabled = props.enabled;\n    }\n\n    if (props.selected) {\n      element.selected = props.selected;\n    }\n\n    context.scene.postProcessStages.add(element);\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.scene && !context.scene.isDestroyed()) {\n      context.scene.postProcessStages.remove(element);\n    }\n\n    if (!element.isDestroyed()) {\n      element.destroy();\n    }\n  },\n  cesiumProps: cesiumProps$D,\n  cesiumReadonlyProps: cesiumReadonlyProps$9\n});\nvar cesiumProps$E = [\"enabled\", \"selected\"];\n\nvar createPostProcessStage = function createPostProcessStage(opts) {\n  return createCesiumComponent({\n    name: name,\n    create: function create(context, props) {\n      if (!context.scene) return;\n      var element = opts.create(props, context.scene.postProcessStages);\n\n      if (typeof props.enabled === \"boolean\") {\n        element.enabled = props.enabled;\n      }\n\n      if (props.selected && \"selected\" in element) {\n        element.selected = props.selected;\n      }\n\n      opts.props.forEach(function (k) {\n        if (!includes(opts.readonlyProps, k) && typeof props[k] !== \"undefined\") {\n          element.uniforms[k] = props[k];\n        }\n      });\n\n      if (!opts.noMount && context.scene && !context.scene.isDestroyed()) {\n        context.scene.postProcessStages.add(element);\n      }\n\n      return element;\n    },\n    destroy: function destroy(element, context) {\n      if (!opts.noMount) {\n        if (context.scene && !context.scene.isDestroyed()) {\n          context.scene.postProcessStages.remove(element);\n        }\n\n        if (!element.isDestroyed()) {\n          element.destroy();\n        }\n      } else {\n        element.enabled = false;\n      }\n    },\n    update: function update(element, props, prevProps) {\n      opts.props.forEach(function (k) {\n        if (!includes(opts.readonlyProps, k) && props[k] !== prevProps[k]) {\n          element.uniforms[k] = props[k];\n        }\n      });\n    },\n    cesiumProps: cesiumProps$E,\n    cesiumReadonlyProps: opts.readonlyProps,\n    defaultProps: {\n      enabled: true\n    }\n  });\n};\n\nvar BlackAndWhiteStage = createPostProcessStage({\n  name: \"BlackAndWhiteStage\",\n  props: [\"gradations\"],\n  create: function create() {\n    return PostProcessStageLibrary.createBlackAndWhiteStage();\n  }\n});\nvar BrightnessStage = createPostProcessStage({\n  name: \"BrightnessStage\",\n  props: [\"brightness\"],\n  create: function create() {\n    return PostProcessStageLibrary.createBrightnessStage();\n  }\n});\nvar LensFlareStage = createPostProcessStage({\n  name: \"LensFlareStage\",\n  props: [\"dirtTexture\", \"starTexture\", \"intensity\", \"distortion\", \"ghostDispersal\", \"haloWidth\", \"earthRadius\"],\n  create: function create() {\n    return PostProcessStageLibrary.createLensFlareStage();\n  }\n});\nvar Fxaa = createPostProcessStage({\n  name: \"Fxaa\",\n  create: function create(props, collection) {\n    return collection.fxaa;\n  },\n  props: []\n});\nvar NightVisionStage = createPostProcessStage({\n  name: \"NightVisionStage\",\n  props: [],\n  create: function create() {\n    return PostProcessStageLibrary.createNightVisionStage();\n  }\n});\nvar cesiumProps$F = [\"enabled\", \"selected\"];\nvar cesiumReadonlyProps$a = [\"inputPreviousStageTexture\", \"name\", \"stages\", \"uniforms\"];\nvar PostProcessStageComposite = createCesiumComponent({\n  name: \"PostProcessStageComposite\",\n  create: function create(context, props) {\n    if (!context.scene) return;\n    var element = new PostProcessStageComposite$1(props);\n\n    if (typeof props.enabled === \"boolean\") {\n      element.enabled = props.enabled;\n    }\n\n    if (props.selected) {\n      element.selected = props.selected;\n    }\n\n    context.scene.postProcessStages.add(element);\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.scene && !context.scene.isDestroyed()) {\n      context.scene.postProcessStages.remove(element);\n    }\n\n    if (!element.isDestroyed()) {\n      element.destroy();\n    }\n  },\n  cesiumProps: cesiumProps$F,\n  cesiumReadonlyProps: cesiumReadonlyProps$a\n});\nvar AmbientOcclusion = createPostProcessStage({\n  name: \"AmbientOcclusion\",\n  create: function create(props, collection) {\n    return collection.ambientOcclusion;\n  },\n  props: [\"ambientOcclusionOnly\", \"bias\", \"delta\", \"frustumLength\", \"intensity\", \"lengthCap\", \"sigma\", \"stepSize\"],\n  noMount: true\n});\nvar Bloom = createPostProcessStage({\n  name: \"Bloom\",\n  create: function create(props, collection) {\n    return collection.bloom;\n  },\n  props: [\"brightness\", \"contrast\", \"delta\", \"glowOnly\", \"sigma\", \"stepSize\"],\n  noMount: true\n});\nvar BlurStage = createPostProcessStage({\n  name: \"BlurStage\",\n  props: [\"delta\", \"sigma\", \"stepSize\"],\n  create: function create() {\n    return PostProcessStageLibrary.createBlurStage();\n  }\n});\nvar DepthOfFieldStage = createPostProcessStage({\n  name: \"DepthOfFieldStage\",\n  props: [\"delta\", \"focalDistance\", \"sigma\", \"stepSize\"],\n  create: function create() {\n    return PostProcessStageLibrary.createDepthOfFieldStage();\n  }\n});\nvar EdgeDetectionStage = createPostProcessStage({\n  name: \"EdgeDetectionStage\",\n  props: [\"color\", \"length\"],\n  create: function create() {\n    return PostProcessStageLibrary.createEdgeDetectionStage();\n  }\n});\nvar SilhouetteStage = createPostProcessStage({\n  name: \"SilhouetteStage\",\n  props: [\"color\", \"length\"],\n  create: function create() {\n    return PostProcessStageLibrary.createSilhouetteStage();\n  }\n});\nvar cesiumProps$G = [\"appearance\", \"cull\", \"debugShowBoundingVolume\", \"depthFailAppearance\", \"modelMatrix\", \"shadows\", \"show\"];\nvar cesiumReadonlyProps$b = [\"allowPicking\", \"asynchronous\", \"compressVertices\", \"geometryInstances\", \"interleave\", \"releaseGeometryInstances\", \"vertexCacheOptimize\"];\nvar Primitive = createCesiumComponent({\n  name: \"Primitive\",\n  create: function create(context, props) {\n    if (!context.primitiveCollection) return;\n    var element = new Primitive$1(props);\n\n    if (props.onReady) {\n      element.readyPromise.then(props.onReady);\n    }\n\n    context.primitiveCollection.add(element);\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.primitiveCollection && !context.primitiveCollection.isDestroyed()) {\n      context.primitiveCollection.remove(element);\n    }\n\n    if (!element.isDestroyed()) {\n      element.destroy();\n    }\n  },\n  cesiumProps: cesiumProps$G,\n  cesiumReadonlyProps: cesiumReadonlyProps$b,\n  useCommonEvent: true\n});\nvar cesiumProps$H = [\"coordinates\", \"height\", \"heightReference\", \"extrudedHeight\", \"extrudedHeightReference\", \"show\", \"fill\", \"material\", \"outline\", \"outlineColor\", \"outlineWidth\", \"rotation\", \"stRotation\", \"granularity\", \"shadows\", \"distanceDisplayCondition\", \"zIndex\"];\nvar cesiumEventProps$p = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar RectangleGraphics = createCesiumComponent({\n  name: \"RectangleGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new RectangleGraphics$1(props);\n    context.entity.rectangle = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.rectangle = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$H,\n  cesiumEventProps: cesiumEventProps$p\n});\nvar cesiumProps$I = [\"backgroundColor\", \"completeMorphOnUserInput\", \"debugCommandFilter\", \"debugShowCommands\", \"debugShowDepthFrustum\", \"debugShowFramesPerSecond\", \"debugShowFrustumPlanes\", \"debugShowFrustums\", \"debugShowGlobeDepth\", \"eyeSeparation\", \"farToNearRatio\", \"focalLength\", \"fog\", \"fxaa\", \"globe\", \"highDynamicRange\", \"imagerySplitPosition\", \"invertClassification\", \"invertClassificationColor\", \"light\", \"logarithmicDepthBuffer\", \"logarithmicDepthFarToNearRatio\", \"mapMode2D\", \"maximumRenderTimeChange\", \"minimumDisableDepthTestDistance\", \"moon\", \"morphTime\", \"nearToFarDistance2D\", \"pickTranslucentDepth\", \"requestRenderMode\", \"rethrowRenderErrors\", \"shadowMap\", \"skyAtmosphere\", \"skyBox\", \"specularEnvironmentMaps\", \"sphericalHarmonicCoefficients\", \"sun\", \"sunBloom\", \"terrainProvider\", \"useDepthPicking\", \"useWebVR\"];\nvar cesiumEventProps$q = {\n  onMorphComplete: \"morphComplete\",\n  onMorphStart: \"morphStart\",\n  onPostRender: \"postRender\",\n  onPreRender: \"preRender\",\n  onPreUpdate: \"preUpdate\",\n  onRenderError: \"renderError\",\n  onTerrainProviderChange: \"terrainProviderChanged\"\n};\n\nvar morph = function morph(scene, mode, morphTime) {\n  switch (mode) {\n    case SceneMode.SCENE2D:\n      scene.morphTo2D(morphTime);\n      break;\n\n    case SceneMode.COLUMBUS_VIEW:\n      scene.morphToColumbusView(morphTime);\n      break;\n\n    case SceneMode.SCENE3D:\n      scene.morphTo3D(morphTime);\n      break;\n  }\n};\n\nvar Scene = createCesiumComponent({\n  name: \"Scene\",\n  create: function create(context, props) {\n    if (context.scene && props.mode) {\n      morph(context.scene, props.mode, props.morphDuration);\n    }\n\n    return context.scene;\n  },\n  update: function update(scene, props, prevProps) {\n    if (props.mode !== prevProps.mode && props.mode) {\n      morph(scene, props.mode, props.morphDuration);\n    }\n  },\n  cesiumProps: cesiumProps$I,\n  cesiumEventProps: cesiumEventProps$q,\n  setCesiumPropsAfterCreate: true\n});\nvar cesiumProps$J = [\"bounceAnimationTime\", \"enableCollisionDetection\", \"enableInputs\", \"enableLook\", \"enableRotate\", \"enableTilt\", \"enableTranslate\", \"enableZoom\", \"inertiaSpin\", \"inertiaTranslate\", \"inertiaZoom\", \"lookEventTypes\", \"maximumMovementRatio\", \"maximumZoomDistance\", \"minimumCollisionTerrainHeight\", \"minimumPickingTerrainHeight\", \"minimumTrackBallHeight\", \"minimumZoomDistance\", \"rotateEventTypes\", \"tiltEventTypes\", \"translateEventTypes\", \"zoomEventTypes\"];\nvar ScreenSpaceCameraController = createCesiumComponent({\n  name: \"ScreenSpaceCameraController\",\n  create: function create(context) {\n    var _a;\n\n    return (_a = context.scene) === null || _a === void 0 ? void 0 : _a.screenSpaceCameraController;\n  },\n  cesiumProps: cesiumProps$J,\n  setCesiumPropsAfterCreate: true\n});\n\nvar ScreenSpaceEvent = function ScreenSpaceEvent(_a) {\n  var action = _a.action,\n      modifier = _a.modifier,\n      type = _a.type;\n  var ctx = useCesium();\n  useEffect(function () {\n    if (!ctx.screenSpaceEventHandler || ctx.screenSpaceEventHandler.isDestroyed()) return;\n\n    if (action) {\n      ctx.screenSpaceEventHandler.setInputAction(action, type, modifier);\n      return function () {\n        if (!ctx.screenSpaceEventHandler || ctx.screenSpaceEventHandler.isDestroyed()) return;\n        ctx.screenSpaceEventHandler.removeInputAction(type, modifier);\n      };\n    } else {\n      ctx.screenSpaceEventHandler.removeInputAction(type, modifier);\n    }\n\n    return undefined;\n  }, [action, ctx.screenSpaceEventHandler, modifier, type]);\n  return null;\n};\n\nvar ScreenSpaceEventHandler = createCesiumComponent({\n  name: \"ScreenSpaceEventHandler\",\n  create: function create(context, props) {\n    var _a;\n\n    return props.useDefault ? (_a = context.cesiumWidget) === null || _a === void 0 ? void 0 : _a.screenSpaceEventHandler : context.scene ? new ScreenSpaceEventHandler$1(context.scene.canvas) : undefined;\n  },\n  destroy: function destroy(element) {\n    if (!element.isDestroyed()) {\n      element.destroy();\n    }\n  },\n  provide: function provide(element) {\n    return {\n      screenSpaceEventHandler: element\n    };\n  }\n});\nvar cesiumProps$K = [\"darkness\", \"enabled\", \"maximumDistance\", \"normalOffset\", \"size\", \"softShadows\"];\nvar ShadowMap = createCesiumComponent({\n  name: \"ShadowMap\",\n  create: function create(context) {\n    var _a;\n\n    return (_a = context.scene) === null || _a === void 0 ? void 0 : _a.shadowMap;\n  },\n  cesiumProps: cesiumProps$K\n});\nvar cesiumProps$L = [\"brightnessShift\", \"hueShift\", \"saturationShift\", \"show\"];\nvar SkyAtmosphere = createCesiumComponent({\n  name: \"SkyAtmosphere\",\n  create: function create(context) {\n    var _a;\n\n    return (_a = context.scene) === null || _a === void 0 ? void 0 : _a.skyAtmosphere;\n  },\n  cesiumProps: cesiumProps$L,\n  setCesiumPropsAfterCreate: true\n});\nvar cesiumProps$M = [\"sources\", \"show\"];\nvar SkyBox = createCesiumComponent({\n  name: \"SkyBox\",\n  create: function create(context) {\n    var _a;\n\n    return (_a = context.scene) === null || _a === void 0 ? void 0 : _a.skyBox;\n  },\n  cesiumProps: cesiumProps$M,\n  setCesiumPropsAfterCreate: true\n});\nvar cesiumProps$N = [\"glowFactor\", \"show\"];\nvar Sun = createCesiumComponent({\n  name: \"Sun\",\n  create: function create(context) {\n    if (!context.scene) return;\n    var element = new Sun$1();\n    context.scene.sun = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.scene && !context.scene.isDestroyed()) {\n      context.scene.sun = new Sun$1();\n    }\n  },\n  cesiumProps: cesiumProps$N,\n  setCesiumPropsAfterCreate: true\n});\nvar cesiumProps$O = [\"clippingPlanes\", \"clock\", \"intervals\", \"maximumMemoryUsage\", \"modelMatrix\", \"shadows\", \"show\", \"style\"];\nvar cesiumReadonlyProps$c = [\"shading\"];\nvar cesiumEventProps$r = {\n  onFrameChange: \"frameChanged\"\n};\nvar TimeDynamicPointCloud = createCesiumComponent({\n  name: \"TimeDynamicPointCloud\",\n  create: function create(context, props) {\n    var _a, _b;\n\n    if (!context.cesiumWidget || !context.primitiveCollection) return;\n    var element = new TimeDynamicPointCloud$1(_assign(_assign({}, props), {\n      clock: (_a = props.clock, _a !== null && _a !== void 0 ? _a : (_b = context.cesiumWidget) === null || _b === void 0 ? void 0 : _b.clock)\n    }));\n\n    if (props.onReady) {\n      element.readyPromise.then(props.onReady);\n    }\n\n    context.primitiveCollection.add(element);\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.primitiveCollection && !context.primitiveCollection.isDestroyed()) {\n      context.primitiveCollection.remove(element);\n    }\n\n    if (!element.isDestroyed()) {\n      element.destroy();\n    }\n  },\n  cesiumProps: cesiumProps$O,\n  cesiumReadonlyProps: cesiumReadonlyProps$c,\n  cesiumEventProps: cesiumEventProps$r\n});\nvar cesiumProps$P = [\"terrainProvider\", \"terrainShadows\", \"clockTrackedDataSource\", \"targetFrameRate\", \"useDefaultRenderLoop\", \"resolutionScale\", \"allowDataSourcesToSuspendAnimation\", \"trackedEntity\", \"selectedEntity\", \"shadows\", \"useBrowserRecommendedResolution\"];\nvar cesiumReadonlyProps$d = [\"animation\", \"baseLayerPicker\", \"fullscreenButton\", \"vrButton\", \"geocoder\", \"homeButton\", \"infoBox\", \"sceneModePicker\", \"selectionIndicator\", \"timeline\", \"navigationHelpButton\", \"navigationInstructionsInitiallyVisible\", \"scene3DOnly\", \"shouldAnimate\", \"clockViewModel\", \"selectedImageryProviderViewModel\", \"imageryProviderViewModels\", \"selectedTerrainProviderViewModel\", \"terrainProviderViewModels\", \"imageryProvider\", \"skyBox\", \"skyAtmosphere\", \"fullscreenElement\", \"showRenderLoopErrors\", \"automaticallyTrackDataSourceClocks\", \"contextOptions\", \"sceneMode\", \"mapProjection\", \"globe\", \"orderIndependentTranslucency\", \"creditContainer\", \"creditViewport\", \"dataSources\", \"terrainExaggeration\", \"mapMode2D\", \"projectionPicker\", \"requestRenderMode\", \"maximumRenderTimeChange\"];\nvar cesiumEventProps$s = {\n  onSelectedEntityChange: \"selectedEntityChanged\",\n  onTrackedEntityChange: \"trackedEntityChanged\"\n};\nvar Viewer = createCesiumComponent({\n  name: \"Viewer\",\n  create: function create(context, props, wrapper) {\n    if (!wrapper) return;\n    var v = new Viewer$1(wrapper, props);\n    if (!v) return;\n\n    if (props.imageryProvider === false) {\n      v.imageryLayers.removeAll();\n    }\n\n    if (v && props.extend) {\n      if (Array.isArray(props.extend)) {\n        props.extend.forEach(function (e) {\n          v.extend(e, {});\n        });\n      } else {\n        v.extend(props.extend, {});\n      }\n    }\n\n    var state = new EventManager(v.scene);\n    return [v, state];\n  },\n  destroy: function destroy(element, context, ref, state) {\n    if (state && !state.isDestroyed()) {\n      state.destroy();\n    }\n\n    if (!element.isDestroyed()) {\n      element.destroy();\n    }\n  },\n  provide: function provide(element, props, state) {\n    var _a;\n\n    return _a = {\n      viewer: element,\n      cesiumWidget: element.cesiumWidget,\n      dataSourceCollection: element.dataSources,\n      entityCollection: element.entities,\n      scene: element.scene,\n      camera: element.scene.camera,\n      imageryLayerCollection: element.scene.globe.imageryLayers,\n      primitiveCollection: element.scene.primitives,\n      globe: element.scene.globe\n    }, _a[eventManagerContextKey] = state, _a;\n  },\n  containerProps: function containerProps(_a) {\n    var id = _a.id,\n        className = _a.className,\n        style = _a.style,\n        full = _a.full,\n        containerProps = _a.containerProps;\n    return _assign({\n      className: className,\n      id: id,\n      style: _assign(_assign({}, full ? {\n        position: \"absolute\",\n        bottom: \"0\",\n        left: \"0\",\n        right: \"0\",\n        top: \"0\"\n      } : {}), style)\n    }, containerProps);\n  },\n  cesiumProps: cesiumProps$P,\n  cesiumReadonlyProps: cesiumReadonlyProps$d,\n  cesiumEventProps: cesiumEventProps$s,\n  renderContainer: true,\n  useCommonEvent: true,\n  useRootEvent: true\n});\nvar cesiumProps$Q = [\"positions\", \"maximumHeights\", \"minimumHeights\", \"show\", \"fill\", \"material\", \"outline\", \"outlineColor\", \"outlineWidth\", \"granularity\", \"shadows\", \"distanceDisplayCondition\"];\nvar cesiumEventProps$t = {\n  onDefinitionChange: \"definitionChanged\"\n};\nvar WallGraphics = createCesiumComponent({\n  name: \"WallGraphics\",\n  create: function create(context, props) {\n    if (!context.entity) return;\n    var element = new WallGraphics$1(props);\n    context.entity.wall = element;\n    return element;\n  },\n  destroy: function destroy(element, context) {\n    if (context.entity) {\n      context.entity.wall = undefined;\n    }\n  },\n  cesiumProps: cesiumProps$Q,\n  cesiumEventProps: cesiumEventProps$t\n});\nexport { AmbientOcclusion, Billboard, BillboardCollection, BillboardGraphics, BlackAndWhiteStage, Bloom, BlurStage, BoxGraphics, BrightnessStage, Camera, CameraFlyHome, CameraFlyTo, CameraFlyToBoundingSphere, Cesium3DTileset, CesiumContext, CesiumWidget, Clock, Consumer, CorridorGraphics, CustomDataSource, CylinderGraphics, CzmlDataSource, DepthOfFieldStage, EdgeDetectionStage, EllipseGraphics, EllipsoidGraphics, Entity, EntityDescription, EntityStaticDescription, Fog, Fxaa, GeoJsonDataSource, Globe, GroundPrimitive, GroundPrimitiveCollection, ImageryLayer, ImageryLayerCollection, KmlDataSource, Label, LabelCollection, LabelGraphics, LensFlareStage, Model, ModelGraphics, Moon, NightVisionStage, ParticleSystem, PathGraphics, PlaneGraphics, PointGraphics, PointPrimitive, PointPrimitiveCollection, PolygonGraphics, Polyline, PolylineCollection, PolylineGraphics, PolylineVolumeGraphics, PostProcessStage, PostProcessStageComposite, Primitive, Provider, RectangleGraphics, Scene, ScreenSpaceCameraController, ScreenSpaceEvent, ScreenSpaceEventHandler, ShadowMap, SilhouetteStage, SkyAtmosphere, SkyBox, Sun, TimeDynamicPointCloud, Viewer, WallGraphics, createCameraOperation, createCesiumComponent, eventManagerContextKey, eventNames, useCesium, useCesiumComponent, withCesium };","map":null,"metadata":{},"sourceType":"module"}