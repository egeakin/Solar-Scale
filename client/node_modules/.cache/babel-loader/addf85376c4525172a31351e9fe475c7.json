{"ast":null,"code":"var _jsxFileName = \"/Users/burakkorkmaz/Desktop/SolarUpp/project/client/src/components/OverlaysDemo.js\";\nimport React, { Component } from 'react'; // import { hot } from \"react-hot-loader/root\";\n\nimport { Viewer, Entity, PointGraphics, EntityDescription, GeoJsonDataSource, KmlDataSource, Cesium3DTileset, Camera, CameraFlyTo, CustomDataSource } from \"resium\";\nimport { Cartesian3, createWorldTerrain, Color } from \"cesium\";\nimport { IonResource } from \"cesium\";\nimport { Growl } from 'primereact/growl';\nimport { Button } from 'primereact/button';\nimport { Messages } from 'primereact/messages';\nconst terrainProvider = createWorldTerrain(); // const position = Cartesian3.fromDegrees(-74.0707383, 40.7117244, 100);\n// const data = {\n//     type: \"Feature\",\n//     properties: {\n//       name: \"Coors Field\",\n//       amenity: \"Baseball Stadium\",\n//       popupContent: \"This is where the Rockies play!\",\n//     },\n//     geometry: {\n//       type: \"Point\",\n//       coordinates: [this.state.latitude, this.state.longitude],\n//     },\n//   };\n\nexport class OverlaysDemo extends Component {\n  componentDidMount() {\n    this.getLocation();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: null,\n      longitude: null,\n      options: {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maxiumumAge: 0\n      }\n    };\n    this.showInfo = this.showInfo.bind(this);\n    this.getLocation = this.getLocation.bind(this);\n    this.getCoordinates = this.getCoordinates.bind(this);\n    this.error = this.error.bind(this);\n  }\n\n  getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.getCoordinates, this.error, this.state.options);\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n  getCoordinates(position) {\n    this.setState({\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    });\n  }\n\n  error() {\n    console.log(\"Heyoooo\");\n  }\n\n  showInfo() {\n    let msg = {\n      severity: 'info',\n      summary: 'Info Message',\n      detail: 'PrimeReact rocks'\n    };\n    this.growl.show(msg);\n    this.messages.show(msg);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-grid p-dir-col p-fluid card card-w-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-col p-fluid p-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, \"Find Your Address\"), /*#__PURE__*/React.createElement(\"p1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }, \"Enter your address from right upper toolbar after picking search button.\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.showInfo,\n      label: \"Help\",\n      className: \"p-button-info\",\n      style: {\n        width: '10em',\n        marginLeft: \"42em\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }, \"Latitude: \", Number(this.state.latitude)), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, \"Longitude: \", Number(this.state.longitude)), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.getLocation,\n      style: {\n        width: '15em'\n      },\n      label: \"Get Your Coordinates\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Messages, {\n      ref: el => this.messages = el,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Growl, {\n      ref: el => this.growl = el,\n      style: {\n        marginTop: '75px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-col p-fluid p-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Viewer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CustomDataSource, {\n      name: \"custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Entity, {\n      name: \"Your Current Location\",\n      description: \"This is your current location.\",\n      position: Cartesian3.fromDegrees(Number(this.state.longitude), Number(this.state.latitude), 1000),\n      point: {\n        pixelSize: 10,\n        color: Color.RED\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/burakkorkmaz/Desktop/SolarUpp/project/client/src/components/OverlaysDemo.js"],"names":["React","Component","Viewer","Entity","PointGraphics","EntityDescription","GeoJsonDataSource","KmlDataSource","Cesium3DTileset","Camera","CameraFlyTo","CustomDataSource","Cartesian3","createWorldTerrain","Color","IonResource","Growl","Button","Messages","terrainProvider","OverlaysDemo","componentDidMount","getLocation","constructor","props","state","latitude","longitude","options","enableHighAccuracy","timeout","maxiumumAge","showInfo","bind","getCoordinates","error","navigator","geolocation","getCurrentPosition","alert","position","setState","coords","console","log","msg","severity","summary","detail","growl","show","messages","render","width","marginLeft","Number","el","marginTop","fromDegrees","pixelSize","color","RED"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n// import { hot } from \"react-hot-loader/root\";\nimport { Viewer, Entity, PointGraphics, EntityDescription, GeoJsonDataSource, KmlDataSource, Cesium3DTileset, Camera, CameraFlyTo, CustomDataSource} from \"resium\";\nimport { Cartesian3, createWorldTerrain, Color} from \"cesium\";\nimport { IonResource } from \"cesium\";\nimport {Growl} from 'primereact/growl';\nimport {Button} from 'primereact/button';\nimport {Messages} from 'primereact/messages';\n\nconst terrainProvider = createWorldTerrain();\n// const position = Cartesian3.fromDegrees(-74.0707383, 40.7117244, 100);\n// const data = {\n//     type: \"Feature\",\n//     properties: {\n//       name: \"Coors Field\",\n//       amenity: \"Baseball Stadium\",\n//       popupContent: \"This is where the Rockies play!\",\n//     },\n//     geometry: {\n//       type: \"Point\",\n//       coordinates: [this.state.latitude, this.state.longitude],\n//     },\n//   };\n\n\nexport class OverlaysDemo extends Component{\n    \n    componentDidMount(){\n        this.getLocation()\n    }\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            latitude: null,\n            longitude: null,\n            options: {\n                enableHighAccuracy: true,\n                timeout: 5000,\n                maxiumumAge: 0\n            }\n        };\n        this.showInfo = this.showInfo.bind(this);\n        this.getLocation = this.getLocation.bind(this);\n        this.getCoordinates = this.getCoordinates.bind(this);\n        this.error = this.error.bind(this);\n        \n    }\n\n    getLocation() {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(this.getCoordinates, this.error, this.state.options);\n        } else {\n          alert(\"Geolocation is not supported by this browser.\");\n        }\n    }   \n\n    getCoordinates(position){\n        this.setState({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        })\n    }\n\n    error(){\n        console.log(\"Heyoooo\")\n    }\n    \n    showInfo() {\n        let msg = {severity: 'info', summary: 'Info Message', detail: 'PrimeReact rocks'};\n        this.growl.show(msg);\n        this.messages.show(msg);\n    }\n\n    render(){\n        return(\n            <div className=\"p-grid p-dir-col p-fluid card card-w-title\" >\n                <div className=\"p-col p-fluid p-card\">\n                    <h1>Find Your Address</h1>\n                    <p1>Enter your address from right upper toolbar after picking search button.</p1>\n                    <Button onClick={this.showInfo} label=\"Help\" className=\"p-button-info\" style={{width:'10em', marginLeft:\"42em\"}} />\n                    <p>Latitude: {Number(this.state.latitude)}</p>\n                    <p>Longitude: {Number(this.state.longitude)}</p>\n                    <Button onClick = {this.getLocation} style={{width:'15em'}} label=\"Get Your Coordinates\"></Button>\n                </div>\n\n                <Messages ref={(el) => this.messages = el} />\n                <Growl ref={(el) => this.growl = el} style={{marginTop: '75px'}} />\n\n                <div className=\"p-col p-fluid p-card\">\n                    <Viewer> \n                    <CustomDataSource name=\"custom\">\n                        <Entity\n                        name=\"Your Current Location\"\n                        description=\"This is your current location.\"\n                        position={Cartesian3.fromDegrees(Number(this.state.longitude), Number(this.state.latitude), 1000)}\n                        point={{ pixelSize: 10, color: Color.RED }}\n                        />\n                    </CustomDataSource>\n                        {/* <CameraFlyTo duration={5} destination={Cartesian3.fromDegrees(Number(this.state.longitude), Number(this.state.latitude), 1000)} /> */}\n                    </Viewer>\n                </div>\n                \n                {/* <Viewer full>\n                    <GeoJsonDataSource data={\"your_geo_json.geojson\"} />\n                    <KmlDataSource data={\"your_geo_json.kml\"} />\n                    <GeoJsonDataSource data={data} />\n                </Viewer> */}\n\n                {/* <Viewer\n                    full\n                    ref={e => {\n                    viewer = e && e.cesiumElement;\n                }}>\n                <Cesium3DTileset url={IonResource.fromAssetId(5714)} onReady={handleReady} />\n                </Viewer> */}\n            </div>\n        )\n    }    \n}\n"]},"metadata":{},"sourceType":"module"}